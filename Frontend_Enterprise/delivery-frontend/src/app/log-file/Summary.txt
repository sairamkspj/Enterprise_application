üîπ Project Summary

UI: File Upload Component (Angular)

What: We built a LogUploadComponent with <input type="file"> and an Upload button.

Why: To let users select a log file from their system.

Best Practice: No need for FormGroup here ‚Äî just handle selectedFile with component logic. Keep it simple when the form has only one file input.

Service Layer (Angular)

What: We created a logfile_Service with Send_data(file) method using HttpClient.post().

Why: Services separate API calls from UI, keeping the component clean.

Best Practice: Always use Angular services for HTTP requests ‚Üí better structure, reusability, and easier testing.

Backend Setup (Django + DRF)

What: Built an API endpoint /upload/ to accept multipart/form-data (the uploaded file).

Why: Needed to receive, read, and process the log file on server-side.

Best Practice: Keep file handling logic inside Django views/serializers, not Angular. Always validate file type & size before processing.

Log Parsing (Backend)

What: Read the .log file and searched for suspicious entries (e.g., ‚Äúunauthorized‚Äù or ‚Äúerror‚Äù).

Why: Extract meaningful info for the user, instead of showing raw logs.

Best Practice: Parsing should be modular ‚Üí separate parsing functions ‚Üí makes code maintainable and testable.

Returning Data (Backend ‚Üí Frontend)

What: API responds with JSON list of parsed suspicious logs.

Why: JSON is lightweight, structured, and integrates easily with Angular.

Best Practice: Always send structured responses (status, message, data) ‚Üí improves error handling.

UI Display (Angular Table)

What: Used a styled box-type table to show suspicious logs in rows.

Why: User-friendly visualization, easier than scrolling raw log files.

Best Practice:

Keep UI clean ‚Üí avoid clutter.

Use Angular‚Äôs *ngFor for dynamic rows.

Style with flex or grid for responsiveness.

Centering the Table

What: Centered the log table using parent flex or margin:auto.

Why: To make the UI clean and visually balanced.

Best Practice: Use flexbox for vertical + horizontal centering instead of margins.

Observables & Subscribe (Angular)

What: this.log_service.Send_data(formData).subscribe({...})

Why: Angular‚Äôs HttpClient returns an Observable ‚Üí you subscribe() to get async response.

Best Practice:

Always unsubscribe in bigger apps (to avoid memory leaks).

Use async pipe when possible in templates.

üîπ Final Best Practices Recap

‚úî Separation of Concerns ‚Üí Component (UI) + Service (API) + Backend (processing).
‚úî Use structured JSON responses.
‚úî Keep UI simple, responsive, and centered.
‚úî Handle errors (e.g., invalid file, backend crash).
‚úî Modularize backend parsing code.
‚úî Use Angular observables properly (subscribe, async pipe).